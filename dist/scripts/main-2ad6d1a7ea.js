function isUrl(e){return/^(f|ht)tps?:\/\//i.test(e)}function checkLink(e,t){if(t&&isUrl(t))return t;if(t)switch(e){case"twitter":return t.indexOf("@")>=0?"https://twitter.com/"+t.replace("@",""):"https://twitter.com/"+t;case"googleplus":return t.indexOf("+")>=0?"https://plus.google.com/u/0/+"+t.replace("+",""):"https://plus.google.com/u/0/+"+t;case"github":return"https://github.com/"+t;default:return'<a href="'+t+'" target="_NEW">'+t+"</a>"}}function sortBySpeakerName(e,t){var s=e.firstname.toLowerCase(),a=t.firstname.toLowerCase();return s<a?-1:s>a?1:0}var getUrlParameter=function(e){var t,s,a=decodeURIComponent(window.location.search.substring(1)),i=a.split("&");for(s=0;s<i.length;s++)if(t=i[s].split("="),t[0]===e)return void 0===t[1]||t[1]},getTrackColor=function(e){switch(e){case"web":return"color-bg-web devfest-chip";case"cloud":return"color-bg-cloud devfest-chip";case"mobile":return"color-bg-mobile devfest-chip";case"discovery":return"color-bg-discovery devfest-chip";default:return"color-bg-default devfest-chip"}},getTypeColor=function(e){switch(e){case"conference":return"color-bg-conference devfest-chip";case"codelab":return"color-bg-codelab devfest-chip";case"quickie":return"color-bg-quickie devfest-chip";default:return"color-bg-default devfest-chip"}},getTimeLabel=function(e){switch(e){case"keynote":return"50 min";case"repas":return"1 h";case"conference":return"50 min";case"codelab":return"2 h";case"quickie":return"20 min";case"after":return"1 h";case"café":return"15 min";default:return"50 min"}};getRoomLabel=function(e){switch(e){case 1:return"en"===language?"Room Titan":"Salle Titan";case 2:return"en"===language?"Room Belem":"Salle Belem";case 3:return"en"===language?"Room Tour de Bretagne":"Salle Tour de Bretagne";case 4:return"en"===language?"Room Graslin":"Salle Graslin";case 5:return"en"===language?"Room Les Machines":"Salle Les machines";case 6:return"en"===language?"Room Tour LU":"Salle Tour LU";case 7:return"en"===language?"Room le Château":"Salle le Château";case 8:return"Mezzanine & Hall";default:return"Cité des congrès"}};var getDayLabel=function(e){switch(e){case 2:return"en"===language?"Thursday, November 10th":"Jeudi 10 novembre";case 1:return"en"===language?"Wednesday, November 9th":"Vendredi 10 mars"}},getHourLabel=function(e,t,s){switch(e){case 1:return s.day1.filter(function(e){return e.id===parseInt(t)})[0].label;case 2:return s.day2.filter(function(e){return e.id===parseInt(t)})[0].label}},getDifficultyLabel=function(e){switch(e){case 1:return"en"===language?"Level beginner":"Niveau débutant";case 2:return"en"===language?"Level intermediate":"Niveau intermédiaire";case 3:return"en"===language?"Level advanced":"Niveau avancé";default:return"en"===language?"Level beginner":"Niveau débutant"}},getLangLabel=function(e){switch(e){case"en":return"en"===language?"English":"Anglais";default:return"en"===language?"French":"Français"}},getSpeakers=function(e,t){for(var s="",a=0;a<e.length;a++)e.length>1&&a>0&&a<=e.length-1&&(s+=" & "),s+=getSpeaker(e[a],t);return s},getSpeaker=function(e,t){var s=t.filter(function(t){return t.id===e})[0];return getSpeakerLabel(s)},getSpeakerPhoto=function(e,t){var s=t.filter(function(t){return t.id===e})[0];return"/images/speakers/"+s.photo},getSpeakerLabel=function(e){var t=null!==e.company?" ("+e.company+")":"";return e.firstname+" "+e.name+t},getSessionByDayHour=function(e,t,s){const a=s.filter(function(s){return s.agenda&&s.agenda.day===e&&s.agenda.hour===t});return a.sort(function(e,t){return"conference"===e.type&&"conference"!==t.type?-1:"conference"!==e.type&&"conference"===t.type?1:0}),a},isFavorite=function(e,t){return!!t&&t.indexOf(e.toString())!==-1},toggleFavorite=function(e,t,s,a){var i=s.indexOf(e.toString());return i===-1||t?t&&s.push(e.toString()):s.splice(i,1),a?fetch("/api/v1/stars/put?login="+a+"&favs="+JSON.stringify(s)).then(function(e){}):localStorage.fav=JSON.stringify(s),s};const favoriteTemplate='<span class="devfest-favorite" v-on:click="toggleFavorite"><span v-if="active" class="devfest-favorite-active"><i class="material-icons">favorite</i></span><span v-else class="devfest-favorite-unactive"><i class="material-icons">favorite_border</i></span></span>';var Favorite=Vue.extend({props:{sid:Number,active:{type:Boolean,"default":!1}},template:favoriteTemplate,methods:{toggleFavorite:function(e){e.stopPropagation(),this.$dispatch("toggle-favorite",this.sid,!this.active),this.active=!this.active}}});Vue.component("favorite",Favorite);const agendaSlotTemplate='<div class="devfest-agenda-card" onClick="location.href=\'./session.html?id={{session.id}}\';"><div class="devfest-agenda-card-avatars mdl-cell--hide-phone">  <img v-if="session.image" :src="session.image" class="devfest-agenda-card-img" />  <img v-if="session.speaker" v-for="speaker in session.speaker" :src="this.getSpeakerPhoto(speaker, this.$root.speakers)" class="devfest-agenda-card-img" /></div><div class="devfest-agenda-card-content">  <span class="devfest-agenda-card-content-session mdl-typography--font-light">{{ session.name }}</span>  <div class="devfest-agenda-card-content-speaker  mdl-typography--font-light" v-if="session.speaker">    {{ this.getSpeakers(session.speaker, this.$root.speakers) }}  </div>  <div class="devfest-agenda-card-content-info-tags">    <span v-if="session.track" class={{this.getTrackColor(session.track)}}>{{ session.track }}</span>    <span v-if="session.type" class={{this.getTypeColor(session.type)}}>{{ session.type }}</span>    <span v-if="session.type" class="devfest-chip color-bg-default">{{this.getTimeLabel(session.type)}}</span>  </div></div><div style="align-self:flex-start"><favorite :sid="session.id" :active="isFavorite(session.id, favorites)" ></favorite></div></div>';var AgendaSlot=Vue.extend({props:{favorites:Array,session:Object},template:agendaSlotTemplate,methods:{getTrackColor:getTrackColor,getTypeColor:getTypeColor,getTimeLabel:getTimeLabel,getSpeakers:getSpeakers,isFavorite:isFavorite,getSpeakerPhoto:getSpeakerPhoto,getRoomLabel:getRoomLabel}});Vue.component("agenda-slot",AgendaSlot);const sessionCardTemplate='<div class="devfest-session-card mdl-color--white shadowLight">  <div class="devfest-session-card-title">    <h4 v-if="displayTitle" class="mdl-card__title-text">{{ session.name }}</h4>    <favorite :sid="session.id" :active="fav" ></favorite>  </div>  <span v-if="displayTitle" class={{this.getTrackColor(session.track)}}>{{ session.track }}</span>  <span v-if="session.type" class={{this.getTypeColor(session.type)}}>{{ session.type }}</span>  <span class="devfest-chip color-bg-default">{{this.getDayLabel(session.agenda.day)}}</span>  <span class="devfest-chip color-bg-default">{{this.getHourLabel(session.agenda.day, session.agenda.hour, agenda)}}</span>  <span v-if="session.agenda.room" class="devfest-chip color-bg-default">{{this.getRoomLabel(session.agenda.room)}}</span>  <span v-if="session.type" class="devfest-chip color-bg-default">{{this.getTimeLabel(session.type)}}</span>  <span class="devfest-chip color-bg-default">{{this.getLangLabel(session.lang)}}</span>  <span v-if="session.difficulty" class="devfest-chip color-bg-default">{{this.getDifficultyLabel(session.difficulty)}}</span>  <div class="devfest-session-desc mdl-typography--font-light">    {{{session.description}}}  </div></div>';var SessionCard=Vue.extend({props:{agenda:Object,session:Object,fav:{type:Boolean,"default":!1},displayTitle:{type:Boolean,"default":!0}},template:sessionCardTemplate,components:{favorite:Favorite},methods:{getTimeLabel:getTimeLabel,getDayLabel:getDayLabel,getHourLabel:getHourLabel,getTrackColor:getTrackColor,getTypeColor:getTypeColor,getDifficultyLabel:getDifficultyLabel,getLangLabel:getLangLabel,getRoomLabel:getRoomLabel}});Vue.component("session-card",SessionCard);const agendaTemplate='<div class="devfest-agenda2-hour-line" v-for="hour in hours">  <div class="devfest-agenda2-hour-col mdl-typography--font-light">    <span class="devfest-chip color-bg-default">{{hour.label}}</span>    <div class="devfest-agenda2-hour-line">&nbsp;</div>  </div>  <div class="devfest-agenda2-hour-content">   <agenda-slot v-for="session in this.getSessionByDayHour(parseInt(day), hour.id, this.sessions)" :session="session" :favorites="favorites"></agenda-slot>  </div></div>';var Agenda=Vue.extend({props:["day","hours","sessions","favorites"],components:{"agenda-slot":AgendaSlot},template:agendaTemplate,methods:{getSessionByDayHour:getSessionByDayHour}});Vue.component("agenda",Agenda);const socialChipTemplate="<span class={{this.getSocialClass(type)}}>{{{ this.getSocialContent(type, value) }}}</span>";var SocialChip=Vue.extend({props:{type:String,value:String},template:socialChipTemplate,methods:{getSocialClass:function(e){switch(e){case"twitter":return"devfest-chip color-bg-twitter";case"googleplus":return"devfest-chip color-bg-googleplus";case"github":return"devfest-chip color-bg-github";case"linkedin":return"devfest-chip color-bg-linkedin";case"blog":return"devfest-chip color-bg-blog"}},getSocialContent:function(e,t){switch(e){case"twitter":return'<a id="devfest-chip" href="'+checkLink(e,t)+'" target="_NEW">Twitter</a>';case"googleplus":return'<a id="devfest-chip" href="'+checkLink(e,t)+'" target="_NEW">G+</a>';case"github":return'<a id="devfest-chip" href="'+checkLink(e,t)+'" target="_NEW">GitHub</a>';case"linkedin":return'<a id="devfest-chip" href="'+checkLink(e,t)+'" target="_NEW">Linkedin</a>';case"blog":return'<a id="devfest-chip" href="'+checkLink(e,t)+'" target="_NEW">Blog</a>'}}}});Vue.component("social-chip",SocialChip);const speakerCardTemplate='<div class="devfest-speaker-card shadowLight" v-on:click="goToSpeakerPage($event, speaker.id)"><div class="mdl-cell--hide-phone">  <img v-if="speaker.photo" :src="\'/images/speakers/\' + speaker.photo" class="devfest-speaker-card-img" /></div><div class="devfest-speaker-card-content">  <div class="devfest-speaker-card-title">    <img v-if="speaker.photo" :src="\'/images/speakers/\' + speaker.photo" class="devfest-speaker-card-img-sm mdl-cell--hide-tablet mdl-cell--hide-desktop" />    <div>      <h5>{{ speaker.firstname }} {{ speaker.name }}</h5>      <h6 v-if="speaker.company">{{ speaker.company }}</h6>    </div>    <div style="position: relative">      <social-chip v-if="speaker.social.twitter" type="twitter" :value="speaker.social.twitter"></social-chip>      <social-chip v-if="speaker.social.googleplus" type="googleplus" :value="speaker.social.googleplus"></social-chip>      <social-chip v-if="speaker.social.github" type="github" :value="speaker.social.github"></social-chip>      <social-chip v-if="speaker.social.linkedin" type="linkedin" :value="speaker.social.linkedin"></social-chip>      <social-chip v-if="speaker.social.blog" type="blog" :value="speaker.social.blog"></social-chip>    </div>  </div>  <div class="mdl-typography--font-light">{{{ speaker.bio }}}</div></div></div>';var SpeakerCard=Vue.extend({props:{speaker:Object},components:{"social-chip":SocialChip},template:speakerCardTemplate,methods:{goToSpeakerPage:function(e,t){e.stopPropagation(),"devfest-chip"!==e.target.id&&(location.href="speaker.html?id="+t)}}});Vue.component("speaker-card",SpeakerCard);var speakerId=getUrlParameter("id"),speakerVue=new Vue({el:"#speakerVue",data:{agenda:null,sessions:null,speaker:null,favorites:[]},ready:function(){this.fetchData()},methods:{fetchData:function(){var e=this;fetch("/assets/devfest.json").then(function(e){return e.json()}).then(function(t){e.agenda=t.agenda;var s=t.speakers.filter(function(e){return e.id===parseInt(speakerId)})[0];e.speaker=s,s&&(e.sessions=t.sessions.filter(function(e){return e.speaker&&e.speaker.indexOf(parseInt(speakerId))!==-1}))});var t=localStorage.userid;t?fetch("/api/v1/stars/get?login="+t).then(function(e){return e.json()}).then(function(t){e.favorites=t.favs||[]}):e.favorites=JSON.parse(localStorage.fav)||[]},getTrackColor:getTrackColor,getTypeColor:getTypeColor,isFavorite:isFavorite},events:{"toggle-favorite":function(e,t){var s=localStorage.userid;toggleFavorite(e,t,this.favorites,s)}}}),speakersVue=new Vue({el:"#speakersVue",data:{speakers:null},ready:function(){this.fetchData()},methods:{fetchData:function(){var e=this;fetch("/assets/devfest.json").then(function(e){return e.json()}).then(function(t){e.speakers=t.speakers.sort(sortBySpeakerName)})}}}),agendaVue=new Vue({el:"#agendaVue",data:{displayedSessions:null,sessions:null,speakers:null,agenda:null,favorites:[],typeFilters:["keynote","conference","codelab","quickie"],curTypeFilters:[],trackFilters:["web","cloud","mobile","discovery"],curTrackFilters:[],curFavoriteFilter:[],day1:!1,day2:!1},ready:function(){this.fetchData()},watch:{curTypeFilters:"filter",curTrackFilters:"filter",curFavoriteFilter:"filter"},methods:{fetchData:function(){var e=this;fetch("/assets/devfest.json").then(function(e){return e.json()}).then(function(t){e.sessions=t.sessions,e.displayedSessions=t.sessions,e.speakers=t.speakers,e.agenda=t.agenda});var t=localStorage.userid;t?fetch("/api/v1/stars/get?login="+t).then(function(e){return e.json()}).then(function(t){e.favorites=t.favs||[]}):e.favorites=localStorage.fav&&JSON.parse(localStorage.fav)||[]},getTypeColor:getTypeColor,getTrackColor:getTrackColor,filter:function(){var e=this,t=this.sessions;this.curTypeFilters.length>0&&(t=t.filter(function(t){return e.curTypeFilters.indexOf(t.type)!==-1})),this.curTrackFilters.length>0&&(t=t.filter(function(t){return e.curTrackFilters.indexOf(t.track)!==-1})),this.curFavoriteFilter.length>0&&(t=t.filter(function(t){return e.favorites.indexOf(t.id.toString())!==-1})),this.displayedSessions=t}},events:{"toggle-favorite":function(e,t){var s=localStorage.userid;toggleFavorite(e,t,this.favorites,s),this.filter()}}}),sessionId=getUrlParameter("id"),sessionVue=new Vue({el:"#sessionVue",data:{agenda:null,session:null,speakers:null,favorites:[]},ready:function(){this.fetchData()},methods:{fetchData:function(){var e=this;fetch("/assets/devfest.json").then(function(e){return e.json()}).then(function(t){if(e.agenda=t.agenda,e.session=t.sessions.filter(function(e){return e.id===parseInt(sessionId)})[0],e.session){var s=e.session.speaker;e.session.speaker&&(e.speakers=t.speakers.filter(function(e){return s.indexOf(parseInt(e.id))!==-1}))}});var t=localStorage.userid;t?fetch("/api/v1/stars/get?login="+t).then(function(e){return e.json()}).then(function(t){e.favorites=t.favs||[]}):e.favorites=JSON.parse(localStorage.fav)||[]},getTrackColor:getTrackColor,getTypeColor:getTypeColor,isFavorite:isFavorite},events:{"toggle-favorite":function(e,t){var s=localStorage.userid;toggleFavorite(e,t,this.favorites,s)}}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
